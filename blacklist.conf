# This is the configuration file for the blacklist tool which
# transforms TCP/IP and UDP/IP addresses to domain names to
# determine whether the corresponding IP should be blocked or not

# interface=<name>
#
# Defines the name of the interface to monitor. To monitor all interfaces
# set this value to "any" (without the quotes) or don't define it.
#
# Default: any
#interface=any

# promiscuous=on|off
#
# Whether to enter promiscuous mode. This means that all the packets are
# to be send to the CPU instead of being handled by the NIC only whenever
# possible. It is not unlikely that we want that "on", I will have to test
# to see what the default should be.
#
# Default: off
#promiscuous=off

# timeout=<milliseconds>
#
# How long to wait for the next set of TCP/UDP packets and react to them.
# This timeout can add a delay to the processing of the packets which may
# not be welcome.
#
# Default: 20
#timeout=20

# buffer_size=<size>
#
# Defines the size of the buffer to use to collect the packets. The larger
# the buffer, the more packets will be added to it before our callback
# gets called. This adds to the delay between the access attempt and
# the blocking of the IP address.
#
# The system uses 64Kb by default and as the minimum because that's the largest
# possible packet size. This means any packet can be picked up. The tcpdump
# tool uses 256Kb (262144). The service also enforces a maximum of 16Mb.
#
# Default: 65536
#buffer_size=65536

# filter=<expression>
#
# The pcap library can make use of a filter expression. This allows you to
# limit the number of packets being checked. For example, you may only want
# packets that travel on port 80 and 443.
#
# It will save time to limit the number of packets going through to the
# blacklist so it is a good idea to add such a filter.
#
# For documentation about the pcap filter features, use:
#     man pcap-filter
#
# Examples:
# Limit to IP packets:           ip
# Limit to UDP and TCP:          tcp or udp
# Limit to specific ports:       src port 80 or 443
# Limit to one source address:   dst host 192.168.5.5
#
# The limits above would result in the following filter (notice the "and"
# keyword between each set of limits):
#
#     filter=ip and (tcp or udp) and (src port 80 or 443) and dst host 192.168.5.5
#
# Note: it looks like the src/dst for the host (IP address) are swapped.
#
# Note: the blacklist code is currently limited to IPv4 TCP and UDP so it
#       is a good idea to at least use such limites. This is why having the
#       `ip` keyword is useful.
#
# Default: ip tcp udp
#filter=ip tcp udp

# create_ipset=<command>
#
# This command is executed once on startup. It is used to create an ipset
# list. You should always include the `-exist` option so it doesn't fail
# when the service is restarted.
#
# WARNING: we set the timeout to 0 (permanent) because we never re-add a
# blocked IP address (unless you restart the process). If you add a timeout
# that IP address will never be blocked again.
#
# Default: ipset -exist create blacklist hash:ip family inet timeout 0 counters
#create_ipset=ipset -exist create blacklist hash:ip family inet timeout 0 counters

# ipset=<command>
#
# This is the command to add an IP address to the ipset table. If you changed
# the name of the list in the `create_ipset` command, then you will need to
# also define this command.
#
# The command line can include "[ip]" (without the quotes) which will be
# replaced by the IP address before it is executed.
#
# See the warning in the create_ipset command about the timeout. That warning
# also applies to this command.
#
# Default: ipset add blacklist [ip]
#ipset=ipset add blacklist [ip]

# blacklist=<domain name>
#
# This variable can be defined any number of times (it needs to be defined
# at least once, though). Each instance defines one domain name which needs
# to be blocked.
#
# The domain name may be started with a period (.example.com). If not present,
# the system adds it.
#
# Note: many large websites use sub-domains, those are automatically blocked
# too (i.e. ".example.com" also blocks "www.example.com", "mobile.example.com"
# etc.), they also use many different domain names to store their data in
# separate servers. For example, facebook as fbcdn.net.
#
# Note: once an IP address domain name was found (or not found) it doesn't
# get searched again. Right now, nothing times out so we keep all the IP
# addresses ever searched. It makes things faster, but the server uses more
# and more memory as more IPs are discovered. In most cases, though, users
# don't visit new websites all the time so it is likely to remain relatively
# small.
#
# Default: none
#blacklist=facebook.com
#blacklist=fdcdn.net
#blacklist=tiktok.com
#blacklist=instagram.com
#blacklist=tweeter.com
#blacklist=myspace.com

